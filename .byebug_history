c
deleted_user_path(x)
c
resources :users
resoourses :users
devise_for :users
c
@user
c
@users
@user
c
x
c
@users
users
x
c
users_path(x)
users_path
x
c
admin_user_path
x
c
current_member
c
current_member
current_user
c
 current_user || current_member
unless current_user || current_member
unles current_user || current_member
unless current_user || current_member
c
request.fullpath
c
user_path(x.id)
c
x.id
x
c
/member/users/:id
x
c
x
user_path(x)
user_path
x
c
current_member.users
c
current_member.users
current_member.where(:user)
current_member.where(user)
current_member(user)
current_member
params
c
@user
params
c
@user
params
c
params
@user
continue
params
c
current_member.users
c
continue
@user.valid?
continue
current_member.tasks.where(assigned_task: nil).or(current_member.tasks.where(status: 'Complete'))
current_member.tasks.where(assigned_task: nil).or(current_member.tasks.where(status: 'Compelete'))
(current_member.tasks).(where(assigned_task: nil).or(current_member.tasks.where(status: 'Compelete')))
(current_member.tasks).(where(assigned_task: nil).or(current_member.tasks.where(status: 'Compelete'))
current_member.tasks.where(assigned_task: nil)
current_member.tasks
current_member.task
current_member
current_user
continue
button_to "Complete", task_path(x), {method: :put , params: {task:{status: "Compelete"}}}
button_to "Complete", method: :put, task_path(x)
button_to "Complete", method: :put, task_path(Task.first)
button_to "Complete", method: :put, Task.first
button_to "Complete", task_path(x) method: :put
button_to "Complete", task_path(x), method: :put
button_to "Complete", task_path(x), method: :put, params: {task:{status: "Complete"}}
continue
request.fullpath
url_path
params
continue
params
continue
user
continue
user
continue
current_user ||  current_member
current_user &&  current_member
continue
current_member
current_user
continue
current_user
current_user.instance_of?(Member)
current_user.instance_of?(Member)_
continue
current_user.instance_of?(User)
current_user.instance?(User)
current_user.instance(User)
current_user.instance_of(User)
current_user
continue
current_user
continue
c
self
c
self
c
User.attribute_method? :admin_user_id
User.attribute_method? :attr_name
ModelName.attribute_method? :attr_name
user
c
@tasks
c
current_user.admin_user_id?
c
@tasks
c
current_user
current_user.admin_user_id?
c
cc
c
ccc
c
AdminUser.find_by(id: admin.adminUser_id).email
AdminUser.find_by(id: admin.adminUser_id)
AdminUser.all
admin.adminUser_id
admin.adminUser
admin
c
user
current_user
current_user.admin?
self
c
self
c
self.email=asdafd
self
c
self
c
self
c
self
self.adminUser_id=1
self
c
user
self
current_user
c
User.attribute_method? :adminUser_id
c
User.attribute_method? :adminUser_id
c
User.attribute_method? :adminUser_id
c
User.attribute_method? :adminUser_id
ModelName.attribute_method? :attr_name
self
c
self
c
self
c
self
c
self
c
self
User.last
User.all
self
self.tasks
self.task
self
c
self
c
self
c
current_user.admin?
current_user.admin
current_user
c
self
c
self[:value]
self&.value
self.value
self
current_user
c
self
c
self
continue
n
sign_in user
sign user
user
continue
response
@task
response
continue
category
c
category
c
should has_many(:tasks).class_name("User")c
should has_many(:tasks)
should has_many(:tasks).class_name("User")
should have_many(:tasks).class_name("User")
c
should validate_presence_of(:email)
should have_many(:tasks)
should have_many(:tasks).class_name("User")
should has_many(:tasks).class_name("User")
should have_many(:tasks).class_name("User")
should have_many(:tasks)
c
should has_many(:user)
should belong_to(:user)
<iframe name="google_ads_top_frame" id="google_ads_top_frame" style="display: none; position: fixed; left: -999px; top: -999px; width: 0px; height: 0px;"></iframe><iframe src="https://www.google.com/recaptcha/api2/aframe" width="0" height="0" style="display: none;"></iframe></body>c
    <div class="d-none js-consent-banner-version" data-consent-banner-version="1"></div>
    <div id="onetrust-style" class="d-none">&nbsp;</div>
    <div id="ot-pc-content" class="d-none"></div>
    <div id="onetrust-banner-sdk" data-controller="s-modal"></div>
    <div id="onetrust-consent-sdk" class="d-none"></div>
        </script><iframe src="https://68b216317badbf2bc9f18935e9f34eec.safeframe.googlesyndication.com/safeframe/1-0-40/html/container.html" style="visibility: hidden; display: none;"></iframe>
            });
                StackExchange.ga.trackPageView();
                StackExchange.ga.setDimension('dimension7', "1686078773.23902752");
