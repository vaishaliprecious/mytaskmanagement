continue
n
TaskMailerJob.set(wait_until:Time.now+2.second).perform_later(self)
TaskMailerJob.set(wait_until:Time.now+2.second).perform(self)
TaskMailerJob.set(wait_until:Time.now+2.second).perform_later(self)
TaskMailerJob.perform_in(Time.now+2.second,self)
SendMailWorker.perform_in(Time.now+2.second,self)
SendMailWorker.set(wait_until:Time.now+2.second).perform_in(Time.now+2.second,self)
SendMailWorker.set(wait_until:Time.now+2.second).perform_in(self)
SendMailWorker.set(wait_until:Time.now+2.second).perform_later(self)
SendMailWorker.set(wait_until:Time.now+2.second).perform(self)
self
continue
TaskMailerJob.new.perform(self)
self
continue
TaskMailerJob.perform_now(self, )
TaskMailerJob.perform_now(self)
TaskMailerJob.perform_now(\ self)
TaskMailerJob.perform_now("test", self)
TaskMailerJob.perform_now("test")
TaskMailerJob.perform_now(1.minutes)
TaskMailerJob.perform_at(1.minutes)
TaskMailerJob.perform_in(1.minutes)
TaskMailerJob
continue
exit
TaskMailerJob.perform_now(self)
TaskMailerJob.perform_now
TaskMailerJob
SendMailWorker.set(wait_untill:Time.now).perform_at(self)
reload!
SendMailWorker.set(wait_untill:Time.now).perform_at(self)
SendMailWorker.set(wait_untill:Time.now+2.second).perform_at(self)
self
SendMailWorker.set(wait_untill:Time.now+2.second).perform_at(self)
SendMailWorker.set(wait_untill:Time.now+2.second).perform_now(self)
SendMailWorker.set(wait_untill:Time.now+2.second).perform(self)
continue
task
continue
task
continue
mail(to: AdminUser.pluck(:email), subject: 'New task created in taskmanagement')
CV
@task
continue
TaskMailer.new_mail(task).deliver_now
continue
c
User.find_by(id: object.assigned_task).firstname
User.find_by(id: object.assigned_task)
object.user
object.assigned_task
object
c
object
c
object.assigned_task
c
object.assigned_task
c
object.approve
object
object.assigned_task
c
object.assigned_task
object
object.user.email
object.user
c
object.category.name
object.category
object
c
object.status
object
c
unless self.assigned_task.present?
self.assigned_task.present?
SendMailWorker.set(wait_untill:Time.now+2.second)
SendMailWorker.set(wait_untill:Time.now+2.second).perform(self)
SendMailWorker.new.perform
c
continue
self.assigned_task.present? && self.previous_changes[:status].present?
self.assigned_task.present? && self.previous_changes[status].present?
self.assigned_task.present? 
continue
self.assigned_task.present? && self.previous_changes[status].present?
if self.assigned_task.present?
self.assigned_task.present?
self.previous_changes[status].present?
c
self.previous_changes[status].present?
self.previous_changes[status]
self.previous_changes
c
@task
task
c
layout 'mailer'
c
task_params
params
self
self.current_user
sefl.current_user
self
current_user
c
ccc
TaskMailer.update_mail(self).deliver_now if self.assigned_task.present?
self.assigned_task.present?
c
current_user.id
TaskMailer.update_mail(self).deliver_now if self.assigned_task == current_user.id 
TaskMailer.update_mail(self).deliver_now unless self.assigned_task.present?
TaskMailer.new_mail(self).deliver_now if self.assigned_task.present?
self.assigned_task.present?
self
params
c
self
current_user.admin?
Task.where(assigned_task: nil)
c
Task.where(assigned_task:3)
Task.last
Task.first
Task.all
@task.update(task_params)
task_params
c
task_params
c
task_params
c
current_user.tasks
current_user.tasks.destroy_all
current_user.tasks
current_user.tasks.destroy
current_user.tasks
current_user.tasks.destroy
current_user.tasks.first
current_user.tasks
current_user
c
Task.all
Task.last
c
Task.last
c
task_params
params
parms
c
Task.last
Task.all
c
Task.all
Task.All
current_user.tasks
current_user
c
cccc
c
current_user
c
Task.all
Task
current_user.tasks
current_user
%=current_user
c
current_user.tasks
current_user
continue
@tasks
n
continue
n
@tasks 
Task.all
continue
@cat
continue
params[:category_id].length == 1
params[:category_id].length.one?
params[:category_id].length
params[:category_id].nil?
params[:category_id].empty?
params
continue
params
parmas
params[:category_id].empty?
continue
params[:category_id].empty?
params[:category_id]
params
parmas
c
@cat==[""]
@cat==""
@cat
c@cat
c
(category=="#{ x.category_id }" && (x.status=="Completed"))
x.status=="Completed"
(category=="#{ x.category_id }")
(category==x.category_id)
(category==x.category)
(category==x.category and (x.status=="Completed"))
c
x
category
c
category
x
category
c
category
x
c
category
x
@cat
c
x
category
c
category
x
c
category
c
x
c
category
x
c
category
x
c
i
x
c
i
x
i
c
x
c
x
c
